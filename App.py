# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NVXkiBtTPJJ4yIJur7lEwWikWSuj5akd
"""

import streamlit as st
import pandas as pd
import pickle
from sklearn.preprocessing import RobustScaler
from sklearn.ensemble import RandomForestClassifier

# Load the saved model
with open("random_forest_model.pkl", 'rb') as model_file:
    model = pickle.load(model_file)

# Function to preprocess input data using RobustScaler
def preprocess_input(data):
    scaler = RobustScaler()
    return scaler.fit_transform(data)

# Streamlit app title
st.title("Diabetes Prediction")

# Subtitle
st.write("Enter the required health parameters to predict the likelihood of diabetes:")

# Input form for user data
st.header("Input Data")

# Add input fields for all features
pregnancies = st.number_input("Pregnancies", min_value=0, value=0)
glucose = st.number_input("Glucose Level", min_value=0.0, value=120.0)
blood_pressure = st.number_input("Blood Pressure (mm Hg)", min_value=0.0, value=70.0)
skin_thickness = st.number_input("Skin Thickness (mm)", min_value=0.0, value=20.0)
insulin = st.number_input("Insulin Level (ÂµU/mL)", min_value=0.0, value=80.0)
bmi = st.number_input("Body Mass Index (BMI)", min_value=0.0, value=25.0, step=0.1)
diabetes_pedigree_function = st.number_input("Diabetes Pedigree Function", min_value=0.0, value=0.5, step=0.01)
age = st.number_input("Age", min_value=0, value=30)

# Predict button
if st.button("Predict"):
    # Combine inputs into a DataFrame
    input_data = pd.DataFrame([[pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi,
                                diabetes_pedigree_function, age]],
                              columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
                                       'BMI', 'DiabetesPedigreeFunction', 'Age'])

    # Preprocess the data
    preprocessed_data = preprocess_input(input_data)

    # Make a prediction
    prediction = model.predict(preprocessed_data)
    prediction_proba = model.predict_proba(preprocessed_data)

    # Display prediction results
    st.subheader("Prediction Result")
    if prediction[0] == 1:
        st.write("The patient is likely to have diabetes.")
    else:
        st.write("The patient is unlikely to have diabetes.")

    # Display probabilities
    st.subheader("Prediction Probabilities")
    st.write(f"Probability of Diabetes: {prediction_proba[0][1]:.2f}")
    st.write(f"Probability of No Diabetes: {prediction_proba[0][0]:.2f}")